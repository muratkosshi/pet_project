import pika
import json
import logging

RABBITMQ_HOST = "rabbitmq"  # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ Docker Compose
RABBITMQ_QUEUE = "presentation_updates"

# üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
def get_rabbitmq_channel():
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=RABBITMQ_QUEUE, durable=True)
    return channel, connection

# üì¢ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å RabbitMQ
def publish_update(uuid: str, task_id: str, status: str):
    channel, connection = get_rabbitmq_channel()
    message = json.dumps({"uuid": uuid, "task_id": task_id, "status": status})
    channel.basic_publish(
        exchange="",
        routing_key=RABBITMQ_QUEUE,
        body=message,
        properties=pika.BasicProperties(delivery_mode=2),  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ–µ
    )
    logging.info(f"üì¢ [RabbitMQ] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: {message}")
    connection.close()
