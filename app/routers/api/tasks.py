from datetime import datetime

from celery.result import AsyncResult
from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import update, select

from app.core.tasks import update_task_status
from app.dependencies.db.database import get_async_session
from app.models import TaskStatus, PresentationFile

router = APIRouter()

@router.get("/task_status/{task_id}")
async def get_task_status(task_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ Celery.
    """
    result = AsyncResult(task_id)
    return {"task_id": task_id, "status": result.status, "result": result.result}


@router.post("/cancel_task/{task_id}")
async def cancel_task(task_id: str, session: AsyncSession = Depends(get_async_session)):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É Celery –ø–æ `task_id`, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–µ —Å—Ç–∞—Ç—É—Å –≤ `TaskStatus` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `uuid` –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.
    """
    result = AsyncResult(task_id)

    if not result:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # üî• –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É Celery
    result.revoke(terminate=True, signal="SIGKILL")

    try:
        # ‚úÖ –ù–∞–π—Ç–∏ `uuid` –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ `task_id`
        presentation_query = await session.execute(
            select(PresentationFile).where(PresentationFile.task_id == task_id)
        )
        presentation = presentation_query.scalars().first()

        if not presentation:
            raise HTTPException(status_code=404, detail="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        uuid = presentation.uuid  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º `uuid` –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        await update_task_status(session=session, task_id=task_id, status="CANCELLED", uuid=presentation.uuid)
        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ `TaskStatus`
        await session.execute(
            update(TaskStatus)
            .where(TaskStatus.task_id == task_id)
            .values(status="CANCELLED", updated_at=datetime.utcnow())
        )

        await session.commit()

        return {"message": f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.", "presentation_uuid": uuid}

    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {str(e)}")
