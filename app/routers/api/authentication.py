import json
import logging
import traceback
import uuid
from datetime import datetime, timedelta

import httpx
import jwt
from fastapi import APIRouter, Depends, HTTPException, Request
from loguru import logger
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.future import select
from app.dependencies.db.database import get_async_session
from app.core.auth.auth import decode_jwt_token, SECRET_KEY, ALGORITHM, fetch_user_profile, JWT_AUDIENCE, \
    create_access_token
from app.core.auth.security import verify_password
from app.core.config import BILIMAL_MAIN_URL, BILIMAL_PROFILE_URL, BILIMAL_API_URL
from app.models import ExternalUserModel, RoleModel
from starlette.responses import JSONResponse


router = APIRouter()

Base = declarative_base()
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API Bilimal

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class LoginRequest(BaseModel):
    login: str
    password: str

class LoginResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"

class MeResponse(BaseModel):
    id: int
    login: str




async def fetch_bilimal_data(url: str, token: str):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Bilimal API."""
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        if not (200 <= response.status_code < 300):
            raise HTTPException(status_code=401, detail="Invalid token")
        return response.json()


@router.get("/authenticate_user")
async def authenticate_user(request: Request, session: AsyncSession = Depends(get_async_session)):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è."""
    token = request.headers.get("Authorization")
    if not token or not token.startswith("Bearer "):
        raise HTTPException(status_code=400, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    token = token.split("Bearer ")[1]

    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT
        try:
            decoded = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM], audience=JWT_AUDIENCE)
            user_id = decoded.get("user_id")

            if not user_id:
                raise HTTPException(status_code=400, detail="Invalid JWT payload: user_id not found")

            logger.info(f"‚úÖ JWT token verified successfully for user_id={user_id}")

        except jwt.ExpiredSignatureError:
            raise HTTPException(status_code=401, detail="Token has expired")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        existing_user_query = await session.execute(
            select(ExternalUserModel).where(ExternalUserModel.external_id == user_id)
        )
        existing_user = existing_user_query.scalars().first()

        if existing_user:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        else:
            logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Bilimal API")
            user_data = await fetch_user_profile(user_id, token)

            if isinstance(user_data, list) and user_data:
                user_data = user_data[0]

            role_id = user_data.get("role_id")
            first_name = user_data.get("first_name") or "Unknown"
            middle_name = user_data.get("middle_name", "")
            last_name = user_data.get("last_name") or "Unknown"
            source_id = user_data.get("source", 1)
            login = user_data.get("uin")

            existing_user = ExternalUserModel(
                external_id=user_id,
                first_name=first_name,
                last_name=last_name,
                user_type=role_id,
                access_token=token,
                registered_at=datetime.utcnow(),
                reset_generation_at=datetime.utcnow() + timedelta(days=30),
                generation_count=0,
                login=login
            )
            session.add(existing_user)
            await session.commit()

        return JSONResponse(
            content={
                "user_id": existing_user.id,
                "generation_limit": existing_user.generation_limit,
                "generation_count": existing_user.generation_count,
                "reset_generation_at": (
                    existing_user.reset_generation_at.isoformat() if existing_user.reset_generation_at else None
                ),
                "first_name": existing_user.first_name,
                "last_name": existing_user.last_name,
            }
        )

    except Exception as e:
        await session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


async def verify_token_bilimal(token: str):
    """–ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JWT, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ Bilimal API."""
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(BILIMAL_MAIN_URL, headers=headers)

        if not (200 <= response.status_code < 300):
            logging.info(f"Invalid authToken{token}, https://api.bilimal.kz/v1/main?source_id=5")
            raise HTTPException(status_code=401, detail="Invalid token")

        user_data = response.json()
        return (
            user_data.get("id"),
            user_data.get("role_id"),
            user_data.get("first_name") or "Unknown",
            user_data.get("middle_name", ""),
            user_data.get("last_name") or "Unknown",
            user_data.get("source", 1),
        )




@router.post("/login")
async def external_user_login(body: LoginRequest, session: AsyncSession = Depends(get_async_session)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API Bilimal.
    """
    try:
        async with session.begin():
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –ø–æ –ª–æ–≥–∏–Ω—É
            existing_user_query = await session.execute(
                select(ExternalUserModel).where(ExternalUserModel.login == body.login)
            )
            existing_user = existing_user_query.scalars().first()

            if existing_user:
                logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {body.login} –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...")
                if not verify_password(body.password, existing_user.password) :
                    logger.warning(f"‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {body.login}. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Bilimal API...")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Bilimal, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
                    async with httpx.AsyncClient() as client:
                        payload = {"login": body.login, "password": body.password}
                        response = await client.post(BILIMAL_API_URL, json=payload)

                    if not (200 <= response.status_code < 300):
                        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

                    # ‚úÖ –ï—Å–ª–∏ Bilimal –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ë–î
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–ª—è {body.login}")
                    existing_user.set_password(body.password)  # –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                    session.add(existing_user)

                # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT
                access_token = create_access_token(
                    data={"user_id": existing_user.external_id, "aud": JWT_AUDIENCE},
                )
                return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "token": access_token}

        # ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Bilimal API
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {body.login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º —á–µ—Ä–µ–∑ Bilimal API...")
        async with httpx.AsyncClient() as client:
            payload = {"login": body.login, "password": body.password}
            response = await client.post(BILIMAL_API_URL, json=payload)

        if not (200 <= response.status_code < 300):
            raise HTTPException(status_code=response.status_code, detail="–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        data = response.json()
        token = data["token"]
        profile = data.get("profile")

        if not token or not profile:
            raise HTTPException(status_code=500, detail="Bilimal –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")

        user_id = profile.get("user_id")
        first_name = profile.get("first_name", "Unknown")
        last_name = profile.get("last_name", "Unknown")
        role_id = profile.get("role_id")
        source_id = profile.get("source", 1)

        if not user_id or not role_id:
            raise HTTPException(status_code=500, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bilimal API.")

        async with session.begin():
            # ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            role_query = await session.execute(
                select(RoleModel).where(RoleModel.id == role_id, RoleModel.source_id == source_id)
            )
            role = role_query.scalars().first()

            if not role:
                raise HTTPException(status_code=403, detail="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏
            try:
                role_permissions = json.loads(role.permissions) if isinstance(role.permissions, str) else role.permissions or {}
            except json.JSONDecodeError:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")

            can_login = role_permissions.get("can_login", False)

            if not can_login:
                logger.warning(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —Ä–æ–ª—å—é (role_id={role_id}, user_id={user_id})")
                raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —É –≤–∞—à–µ–π —Ä–æ–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—Ö–æ–¥")

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            new_user = ExternalUserModel(
                external_id=user_id,
                login=body.login,
                first_name=first_name,
                last_name=last_name,
                user_type=role_id,
                access_token=token,
                registered_at=datetime.utcnow(),
                generation_count=0,
            )
            new_user.set_password(body.password)  # ‚úÖ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            session.add(new_user)

        # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–π JWT —á–µ—Ä–µ–∑ `create_access_token`
        access_token = create_access_token(
            data={"user_id": user_id, "aud": JWT_AUDIENCE},
        )

        return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "token": access_token}

    except HTTPException as http_err:
        await session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {http_err.detail}")
        raise http_err

    except Exception as e:
        await session.rollback()
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ")

@router.get("/decode_jwt")
async def decode_jwt(request: Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    token = request.headers.get("Authorization")
    if not token or not token.startswith("Bearer "):
        raise HTTPException(status_code=400, detail="Missing or invalid Authorization header")

    token = token.split("Bearer ")[1]  # –£–±–∏—Ä–∞–µ–º "Bearer "
    decoded_data = decode_jwt_token(token)
    return {"decoded_token": decoded_data}
