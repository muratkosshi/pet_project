import asyncio
import logging
import time
from asyncio import create_task
from traceback import format_exc

from fastapi import FastAPI, Request
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response

from app.dependencies.db.database import get_async_session
from app.models import LogEntry


class DatabaseLogHandler(logging.Handler):
    """–õ–æ–≥-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""

    def __init__(self):
        super().__init__()

    def emit(self, record):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ emit, –Ω–æ —Ä–∞–±–æ—Ç–∞ —Å –ë–î –∏–¥—ë—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ."""
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(self._emit_async(record))  # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º event loop
        except RuntimeError:
            # –ï—Å–ª–∏ event loop –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
            asyncio.run(self._emit_async(record))

    async def _emit_async(self, record):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ –ë–î."""
        async for session in get_async_session():
            async with session.begin():
                log_entry = LogEntry(
                    level=record.levelname,
                    message=record.getMessage(),
                    traceback=record.exc_text if record.exc_info else None,
                )
                session.add(log_entry)
            await session.commit()  # –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    def format_message(self, record):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        level = record.levelname

        if level == "INFO":
            return f"‚ÑπÔ∏è INFO: {record.getMessage()}"
        elif level == "WARNING":
            return f"‚ö†Ô∏è WARNING: {record.getMessage()}"
        elif level == "ERROR":
            return f"‚ùå ERROR: {record.getMessage()}"
        elif level == "CRITICAL":
            return f"üî• CRITICAL ERROR: {record.getMessage()}"
        else:
            return f"üîç DEBUG: {record.getMessage()}"

# –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥-—Ö–µ–Ω–¥–ª–µ—Ä
db_handler = DatabaseLogHandler()
logger = logging.getLogger("uvicorn")
logger.setLevel(logging.INFO)
logger.addHandler(db_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ö–æ–Ω—Å–æ–ª—å + –§–∞–π–ª)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log"),  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        logging.StreamHandler(),         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        db_handler,                      # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    ]
)


async def save_log_to_db(session: AsyncSession, level: str, message: str, exc_info=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    traceback_text = None

    if exc_info:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π traceback
        logging.exception(message, exc_info=exc_info)
        traceback_text = format_exc()

    async with session.begin():
        log_entry = LogEntry(level=level, message=message, traceback=traceback_text)
        session.add(log_entry)


class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""

    def __init__(self, app: FastAPI):
        super().__init__(app)

    async def dispatch(self, request: Request, call_next):
        start_time = time.time()

        async for session in get_async_session():  # –£–±–∏—Ä–∞–µ–º session_factory
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
                log_message = f"üì• Request: {request.method} {request.url.path} from {request.client.host}"
                logging.info(log_message)
                await save_log_to_db(session, "INFO", log_message)

                response = await call_next(request)
                process_time = time.time() - start_time
                response_message = f"‚úÖ Response: {response.status_code} ({process_time:.2f}s)"
                logging.info(response_message)
                await save_log_to_db(session, "INFO", response_message)

                return response

            except Exception as e:
                process_time = time.time() - start_time
                error_message = f"‚ùå Error: {str(e)} ({process_time:.2f}s)"
                logging.error(error_message, exc_info=True)
                await save_log_to_db(session, "ERROR", error_message, exc_info=e)
                return Response("Internal Server Error", status_code=500)
